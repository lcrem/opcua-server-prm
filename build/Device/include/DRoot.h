
/*  Â© Copyright CERN, 2015. All rights not expressly granted are reserved.
    Authors(from Quasar team): Piotr Nikiel
        
    This file is part of Quasar.
   
    Quasar is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public Licence as published by
    the Free Software Foundation, either version 3 of the Licence.
    Quasar is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public Licence for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with Quasar.  If not, see <http://www.gnu.org/licenses/>.
    
    This file was completely generated by Quasar (additional info: using transform designToRootHeader.xslt) 
    on 2020-02-28T11:53:03.18Z
 */


#ifndef DROOT_H_
#define DROOT_H_


#include <opcua_platformdefs.h>

#include <vector>
#include <string>

namespace Device
{


  class DController;


  class DRoot
  {
  public:
    /* yes, its a singleton */
    static DRoot *getInstance ();

      DRoot ();
      virtual ~ DRoot ();

    /* To gracefully quit */
    void unlinkAllChildren () const;

    /* For constructing the tree of devices and for browsing children. */

    void add (DController * d)
    {
      m_childrenController.push_back (d);
    }
    const std::vector < DController * >&controllers () const
    {
      return m_childrenController;
    }



    /* find methods for children */


    /* Here you can put your custom code, e.g. for browsing objects which are children of root elements */

    std::string getFullName () const
    {
      return "[ROOT]";
    }

  private:
    static DRoot *m_instance;	/* it's a singleton class */

    // disable copy
      DRoot (const DRoot &);
      DRoot & operator= (const DRoot &);

    /* Pointers to children */

      std::vector < DController * >m_childrenController;


  };

}
#endif // include guard
